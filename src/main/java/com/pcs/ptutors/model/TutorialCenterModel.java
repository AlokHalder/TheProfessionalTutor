/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pcs.ptutors.model;

import com.pcs.ptutors.tutorialcenter.vo.TutorialCenterDataVO;
import com.pcs.ptutors.exception.ProfessionalTutorsException;
import com.pcs.ptutors.constant.ProfessionalTutorsConstant;
import com.pcs.ptutors.util.MailSend;
import com.pcs.ptutors.util.ZnetIndiaMailService;
import com.pcs.ptutors.vo.ResultVO;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

/**
 *
 * @author ibm
 */
public class TutorialCenterModel {

    ResourceBundle resourceBundle = ResourceBundle.getBundle("com.tutors.properties.professionaltutorsSQL");
    String message = null;

    /**
     *
     * @param tutorialCenterDataVO
     * @return
     */
    public ResultVO instituteLoginValidation(String instituteId, String institutePassword) throws Exception, ProfessionalTutorsException {
        ResultVO resultVO = new ResultVO();
        boolean instituteValidationFlag = false;
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rst = null;
        String instituteLoginName = null;
        if (null != instituteId && null != institutePassword) {
            try {
                DbConnection dbConnection = new DbConnection();
                conn = dbConnection.dbConnect();


                //String sqlQueryPart = "select institute_id,institute_login_password  from tutorial_center where institute_id =? and institute_login_password=?";
                StringBuffer sqlQueryPart = new StringBuffer("select institute_login_name,institute_id,institute_login_password,INSTITUTE_FULL_NAME  from tutorial_center where");

                if (null != instituteId && instituteId.contains("@") && null != institutePassword) {
                    sqlQueryPart.append(" institute_email = '" + instituteId + "'");
                    sqlQueryPart.append(" and binary institute_login_password = '" + institutePassword + "'");

                } else if (null != instituteId && !(instituteId).contains("@") && null != institutePassword) {
                    sqlQueryPart.append(" institute_login_name = '" + instituteId + "'");
                    sqlQueryPart.append(" and binary institute_login_password = '" + institutePassword + "'");

                }

                pstmt = conn.prepareStatement(sqlQueryPart.toString());
                //pstmt.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_1, instituteId);
                //pstmt.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_2, institutePassword);

                rst = pstmt.executeQuery();
                if (rst.next()) {
                    instituteValidationFlag = true;
                    resultVO.setInstituteId(rst.getString("institute_id"));
                    resultVO.setUserLoginName(rst.getString("institute_login_name"));
                    resultVO.setPassword(rst.getString("institute_login_password"));
                    resultVO.setUserCallName(rst.getString("INSTITUTE_FULL_NAME"));
                } else {
                    instituteValidationFlag = false;
                    throw new ProfessionalTutorsException("DATABASE_ERROR_CODE_001", "Invalid User Credential !!");
                }

                resultVO.setUserValidationFlag(instituteValidationFlag);
            } /*catch (ProfessionalTutorsException pte) {
             throw pte;
             } */ catch (SQLException sqlException) {
                sqlException.printStackTrace();
                throw sqlException;
            } catch (Exception exception) {
                exception.printStackTrace();
                throw exception;
            } finally {
                try {
                    if (null != conn) {
                        conn.close();
                    }

                    if (null != pstmt) {
                        pstmt.close();
                    }
                    if (null != rst) {
                        rst.close();
                    }


                } catch (SQLException sqlException) {
                    sqlException.printStackTrace();
                    throw sqlException;
                }
            }
        }
        return resultVO;
    }

    public ResultVO registerTutorialCenter(TutorialCenterDataVO tutorialCenterDataVO) {
        Connection conn = null;
        PreparedStatement pst = null;
        ResultVO resultVO = new ResultVO();


        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();

            /* Institute Login Information */
            String instituteId = getAutogeneratedId();
            String loginName = tutorialCenterDataVO.getInstituteLoginName();
            String loginPassword = tutorialCenterDataVO.getInstituePassword();
            String securityQuestion = tutorialCenterDataVO.getInstituterSecurityQuestion();
            String securityAnswer = tutorialCenterDataVO.getInstituteSecurityAnswer();

            /* Institute General Information  */
            String instituteName = tutorialCenterDataVO.getInstituteName();
            String institutePrefaceInfo = tutorialCenterDataVO.getInstitutePrefaceInfo();
            String countryCode = tutorialCenterDataVO.getInstituteCountryName();
            String locationId = tutorialCenterDataVO.getInstituteLocationName();
            String instituteArea = tutorialCenterDataVO.getInstituteArea();
            String instituteLandMark = tutorialCenterDataVO.getInstituteLandMark();
            String instituteAddress = tutorialCenterDataVO.getInstituteAddress();
            String contactPerson = tutorialCenterDataVO.getInstituteContactPerson();
            String institueTelephone = tutorialCenterDataVO.getInstituteTelephone();
            String instituteMobile = tutorialCenterDataVO.getInstituteMobile();
            String instituteEmail = tutorialCenterDataVO.getInstituteEmail();
            String instituteWebsite = tutorialCenterDataVO.getInstituteWebsiteAddress();


            /* Institute Academic Information */
            String instituteCourses = tutorialCenterDataVO.getInstituteCoursesOffered();
            String instituteFaculty = tutorialCenterDataVO.getInstituteFacultyDetails();
            String instituteAchivement = tutorialCenterDataVO.getInstituteAchivement();


            String sqlQuery = "insert into tutorial_center(institute_id,institute_login_name,institute_login_password,institute_security_question_id,institute_security_answer,institute_full_name,institute_preface_info,institute_country_code,institute_location_id,institute_area,institute_landmark,institute_address,institute_contact_person,institute_telephone,institute_mobile,institute_email,institute_website,institute_courses,institute_faculty,institute_achivement,institute_registration_date,institute_membership_category) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),'Free')";
            pst = conn.prepareStatement(sqlQuery);

            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_1, instituteId);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_2, loginName);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_3, loginPassword);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_4, securityQuestion);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_5, securityAnswer);

            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_6, instituteName);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_7, institutePrefaceInfo);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_8, countryCode);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_9, locationId);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_10, instituteArea);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_11, instituteLandMark);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_12, instituteAddress);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_13, contactPerson);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_14, institueTelephone);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_15, instituteMobile);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_16, instituteEmail);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_17, instituteWebsite);

            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_18, instituteCourses);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_19, instituteFaculty);
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_20, instituteAchivement);

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                resultVO.setInstituteId(instituteId);
                resultVO.setValidationMessage("Institute/Tutorial Center successfully registered");
                String senderName = "helpdesk@ptutors.org";
                ZnetIndiaMailService znetIndiaMailService = new ZnetIndiaMailService();
                znetIndiaMailService.sendEmail(senderName, instituteId, instituteEmail, loginName, loginPassword);


            } else {
                resultVO.setInstituteId(instituteId);
                resultVO.setValidationMessage("Institute/Tutorial Center registration failed");
            }
            MailSend mailSend = new MailSend();
            mailSend.sendEmail(instituteName, instituteId, institueTelephone, instituteEmail, loginName, loginPassword);


        } catch (Exception e) {
            e.getMessage();
            e.printStackTrace();

        }
        return resultVO;
    }

    /**
     *
     * @param tutorialCenterId
     * @return
     */
    public ResultVO editInstituteProfileUpdateService(TutorialCenterDataVO tutorialCenterDataVO) {
        ResultVO resultVO = null;
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();
            String updateQuery = "update tutorial_center set INSTITUTE_FULL_NAME=?,INSTITUTE_PREFACE_INFO=?,institute_area=?,institute_country_code=?,institute_location_id=?,institute_landmark=?,institute_address=?,institute_contact_person=?,institute_telephone=?,institute_mobile=?,institute_email=?,institute_website=?,institute_courses=?,institute_achivement=? where institute_id=?";
            pst = conn.prepareStatement(updateQuery);
            pst.setString(1, tutorialCenterDataVO.getInstituteName());
            pst.setString(2, tutorialCenterDataVO.getInstitutePrefaceInfo());
            pst.setString(3, tutorialCenterDataVO.getInstituteArea());
            pst.setString(4, tutorialCenterDataVO.getInstituteCountryName());
            pst.setString(5, tutorialCenterDataVO.getInstituteLocationName());
            pst.setString(6, tutorialCenterDataVO.getInstituteLandMark());
            pst.setString(7, tutorialCenterDataVO.getInstituteAddress());
            pst.setString(8, tutorialCenterDataVO.getInstituteContactPerson());
            pst.setString(9, tutorialCenterDataVO.getInstituteTelephone());
            pst.setString(10, tutorialCenterDataVO.getInstituteMobile());
            pst.setString(11, tutorialCenterDataVO.getInstituteEmail());
            pst.setString(12, tutorialCenterDataVO.getInstituteWebsiteAddress());
            pst.setString(13, tutorialCenterDataVO.getInstituteCoursesOffered());
            pst.setString(14, tutorialCenterDataVO.getInstituteAchivement());
            pst.setString(15, tutorialCenterDataVO.getInstituteId());
            int row = pst.executeUpdate();
            if (row > 0) {
                resultVO = new ResultVO();
                resultVO.setValidationMessage("update success");
            } else {
                resultVO = new ResultVO();
                resultVO.setValidationMessage("not update");
            }
        } catch (SQLException exception) {
        }
        return resultVO;
    }

    public TutorialCenterDataVO editInstituteProfileService(String centerId) {
        TutorialCenterDataVO tutorialCenterDataVO = new TutorialCenterDataVO();
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();
            String queryForViewUpdate = "select INSTITUTE_FULL_NAME,INSTITUTE_PREFACE_INFO,institute_area,institute_country_code,institute_location_id,institute_landmark,institute_address,institute_contact_person,institute_telephone,institute_mobile,institute_email,institute_website,institute_courses,institute_achivement from tutorial_center where institute_id=?";
            pst = conn.prepareStatement(queryForViewUpdate);
            pst.setString(1, centerId);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                tutorialCenterDataVO.setInstituteName(rs.getString("INSTITUTE_FULL_NAME"));
                tutorialCenterDataVO.setInstitutePrefaceInfo(rs.getString("INSTITUTE_PREFACE_INFO"));
                tutorialCenterDataVO.setInstituteArea(rs.getString("institute_area"));
                tutorialCenterDataVO.setInstituteCountryName(rs.getString("institute_country_code"));
                tutorialCenterDataVO.setInstituteLocationName(rs.getString("institute_location_id"));
                tutorialCenterDataVO.setInstituteLandMark(rs.getString("institute_landmark"));
                tutorialCenterDataVO.setInstituteAddress(rs.getString("institute_address"));
                tutorialCenterDataVO.setInstituteContactPerson(rs.getString("institute_contact_person"));
                tutorialCenterDataVO.setInstituteTelephone(rs.getString("institute_telephone"));
                tutorialCenterDataVO.setInstituteMobile(rs.getString("institute_mobile"));
                tutorialCenterDataVO.setInstituteEmail(rs.getString("institute_email"));
                tutorialCenterDataVO.setInstituteWebsiteAddress(rs.getString("institute_website"));
                tutorialCenterDataVO.setInstituteCoursesOffered(rs.getString("institute_courses"));
                tutorialCenterDataVO.setInstituteAchivement(rs.getString("institute_achivement"));


            }

        } catch (SQLException sQLException) {
        } finally {
            try {

                if (null != pst) {
                    pst.close();
                }

                if (null != conn) {
                    conn.close();
                }

            } catch (SQLException sqlException) {
            }
        }
        return tutorialCenterDataVO;
    }

    public TutorialCenterDataVO populateTutorialCenterData(String tutorialCenterId) {
        //   System.out.println("TUTORIAL_CENTER_QUERY_002 ::  "+ resourceBundle.getString("TUTORIAL_CENTER_QUERY_002"));
        TutorialCenterDataVO tutorialCenterDataVO = new TutorialCenterDataVO();
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();
            System.out.println(" tutorialCenterId  :: -------------------------------------------------->" + tutorialCenterId);

            // PreparedStatement pst = conn.prepareStatement(resourceBundle.getString(ProfessionalTutorsConstant.TUTORIAL_CENTER_QUERY_002));
            pst = conn.prepareStatement("select * from tutorial_center tc , country_name cn , location_name loc , secret_question sq where tc.institute_country_code = cn.country_code and tc.institute_location_id = loc.location_id and tc.institute_security_question_id = sq.secret_question_id  and institute_id = ?");
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_1, tutorialCenterId);

            ResultSet rs = pst.executeQuery();
            while (rs.next()) {


                tutorialCenterDataVO.setInstituteId(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ID));
                tutorialCenterDataVO.setInstituteLoginName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_NAME));
                //   tutorialCenterDataVO.setInstituePassword(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_PASSWORD));
                tutorialCenterDataVO.setInstituterSecurityQuestion(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_QUESTION));
                tutorialCenterDataVO.setInstituteSecurityAnswer(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_ANSWER));
                tutorialCenterDataVO.setInstituteName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FULL_NAME));
                tutorialCenterDataVO.setInstitutePrefaceInfo(rs.getString(ProfessionalTutorsConstant.INSTITUTE_PREFACE_INFO));
                tutorialCenterDataVO.setInstituteCountryName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COUNTRY_NAME));
                tutorialCenterDataVO.setInstituteLocationName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOCATION_NAME));
                tutorialCenterDataVO.setInstituteArea(rs.getString(ProfessionalTutorsConstant.INSTITUTE_AREA));
                tutorialCenterDataVO.setInstituteLandMark(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LANDMARK));
                tutorialCenterDataVO.setInstituteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ADDRESS));
                tutorialCenterDataVO.setInstituteContactPerson(rs.getString(ProfessionalTutorsConstant.INSTITUTE_CONTACT_PERSON));
                tutorialCenterDataVO.setInstituteTelephone(rs.getString(ProfessionalTutorsConstant.INSTITUTE_TELEPHONE));
                tutorialCenterDataVO.setInstituteMobile(rs.getString(ProfessionalTutorsConstant.INSTITUTE_MOBILE));
                tutorialCenterDataVO.setInstituteEmail(rs.getString(ProfessionalTutorsConstant.INSTITUTE_EMAIL));
                tutorialCenterDataVO.setInstituteWebsiteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_WEBSITE));
                tutorialCenterDataVO.setInstituteCoursesOffered(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COURSES));
                System.out.println("serviceeeeeeeeeee cource==" + rs.getString(ProfessionalTutorsConstant.INSTITUTE_COURSES));
                tutorialCenterDataVO.setInstituteFacultyDetails(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FACULTY));
                tutorialCenterDataVO.setInstituteAchivement(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ACHIVEMENT));
                tutorialCenterDataVO.setImageFlag(rs.getInt(ProfessionalTutorsConstant.IMAGE_FLAG));

            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } catch (Exception exception) {
            exception.getMessage();
            exception.printStackTrace();

        } finally {
            try {

                if (null != pst) {
                    pst.close();
                }

                if (null != conn) {
                    conn.close();
                }

            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            }
        }
        return tutorialCenterDataVO;
    }

    /**
     * created by chiranjit
     */
    public TutorialCenterDataVO populateTutorialCenterPercialData(String tutorialCenterId) {
        //   System.out.println("TUTORIAL_CENTER_QUERY_002 ::  "+ resourceBundle.getString("TUTORIAL_CENTER_QUERY_002"));
        TutorialCenterDataVO tutorialCenterDataVO = new TutorialCenterDataVO();
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();
            System.out.println(" tutorialCenterId  :: -------------------------------------------------->" + tutorialCenterId);
            System.out.println("before query start......chiru..");
            // PreparedStatement pst = conn.prepareStatement(resourceBundle.getString(ProfessionalTutorsConstant.TUTORIAL_CENTER_QUERY_002));
            pst = conn.prepareStatement("select * from tutorial_center tc , country_name cn , location_name loc , secret_question sq where tc.institute_country_code = cn.country_code and tc.institute_location_id = loc.location_id and tc.institute_security_question_id = sq.secret_question_id  and institute_id = ?");
            pst.setString(ProfessionalTutorsConstant.PARAMETER_INDEX_1, tutorialCenterId.trim());



            ResultSet rs = pst.executeQuery();
            while (rs.next()) {


                tutorialCenterDataVO.setInstituteId(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ID));
                System.out.println("INSTITUTE_ID in service after exe...query..." + rs.getString(ProfessionalTutorsConstant.INSTITUTE_ID));
                tutorialCenterDataVO.setInstituteLoginName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_NAME));
                //tutorialCenterDataVO.setInstituePassword(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_PASSWORD));
                tutorialCenterDataVO.setInstituterSecurityQuestion(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_QUESTION));
                tutorialCenterDataVO.setInstituteSecurityAnswer(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_ANSWER));
                tutorialCenterDataVO.setInstituteName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FULL_NAME));
                tutorialCenterDataVO.setInstitutePrefaceInfo(rs.getString(ProfessionalTutorsConstant.INSTITUTE_PREFACE_INFO));
                tutorialCenterDataVO.setInstituteLocationName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOCATION_NAME));
                tutorialCenterDataVO.setInstituteArea(rs.getString(ProfessionalTutorsConstant.INSTITUTE_AREA));
                tutorialCenterDataVO.setInstituteLandMark(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LANDMARK));
                tutorialCenterDataVO.setInstituteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ADDRESS));

                tutorialCenterDataVO.setInstituteEmail(rs.getString(ProfessionalTutorsConstant.INSTITUTE_EMAIL));
                tutorialCenterDataVO.setInstituteWebsiteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_WEBSITE));
                tutorialCenterDataVO.setInstituteCoursesOffered(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COURSES));
                tutorialCenterDataVO.setInstituteAchivement(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ACHIVEMENT));
                tutorialCenterDataVO.setInstituteMobile(rs.getString(ProfessionalTutorsConstant.INSTITUTE_MOBILE));
                tutorialCenterDataVO.setInstituteTelephone(rs.getString(ProfessionalTutorsConstant.INSTITUTE_TELEPHONE));
                tutorialCenterDataVO.setInstituteregistrationdate(rs.getString(ProfessionalTutorsConstant.INSTITUTE_REGISTRATION_DATE));
            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } catch (Exception exception) {
            exception.getMessage();
            exception.printStackTrace();

        } finally {
            try {

                if (null != pst) {
                    pst.close();
                }

                if (null != conn) {
                    conn.close();
                }

            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            }
        }
        return tutorialCenterDataVO;
    }

    /**
     * This is used for Home Page Menu section
     *
     * @return
     */
    public List<TutorialCenterDataVO> populateLimitedListOfTutorialCenter() {
        List<TutorialCenterDataVO> listOfTutorialCenter = new ArrayList<TutorialCenterDataVO>();
        Connection conn = null;
        PreparedStatement pst = null;
        try {


            if (null == conn) {
                conn = DbConnectionPool.dbConnectThree();
            }

            /*
             java.util.Random rand = new java.util.Random();
             int size = DbConnectionPool.dbConnectPool().size();
             int i = rand.nextInt(size);
             System.out.print(" Position of Connection object  ::--------------------------------> " + i);
             conn = DbConnectionPool.dbConnectPool().get(i);
             */
            //   PreparedStatement pst = conn.prepareStatement("select centerid , centername from tutorial_center order by registration_date desc limit 5");
            pst = conn.prepareStatement("select institute_id , institute_full_name from tutorial_center");

            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                TutorialCenterDataVO tutorialCenterDataVO = new TutorialCenterDataVO();
                tutorialCenterDataVO.setInstituteId(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ID));
                tutorialCenterDataVO.setInstituteName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FULL_NAME));

                listOfTutorialCenter.add(tutorialCenterDataVO);


            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } catch (Exception exception) {
            exception.getMessage();
            exception.printStackTrace();

        } finally {
            try {

                if (null != pst) {
                    pst.close();
                }

                if (null != conn) {
                    conn.close();
                }

            } catch (SQLException sqlException) {
            }
        }
        return listOfTutorialCenter;
    }

    /**
     *
     * @return
     */
    public List<TutorialCenterDataVO> populateListOfTutorialCenters() {
        List<TutorialCenterDataVO> listOfTutorialCenter = new ArrayList<TutorialCenterDataVO>();
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();

            pst = conn.prepareStatement("select * from tutorial_center order by institute_registration_date desc");

            ResultSet rs = pst.executeQuery();
            while (rs.next()) {

                TutorialCenterDataVO tutorialCenterDataVO = new TutorialCenterDataVO();

                tutorialCenterDataVO.setInstituteId(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ID));
                tutorialCenterDataVO.setInstituteLoginName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_NAME));
                //   tutorialCenterDataVO.setInstituePassword(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_PASSWORD));
                tutorialCenterDataVO.setInstituterSecurityQuestion(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_QUESTION));
                tutorialCenterDataVO.setInstituteSecurityAnswer(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_ANSWER));
                tutorialCenterDataVO.setInstituteName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FULL_NAME));
                tutorialCenterDataVO.setInstitutePrefaceInfo(rs.getString(ProfessionalTutorsConstant.INSTITUTE_PREFACE_INFO));
                tutorialCenterDataVO.setInstituteCountryName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COUNTRY_NAME));
                tutorialCenterDataVO.setInstituteLocationName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOCATION_NAME));
                tutorialCenterDataVO.setInstituteArea(rs.getString(ProfessionalTutorsConstant.INSTITUTE_AREA));
                tutorialCenterDataVO.setInstituteLandMark(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LANDMARK));
                tutorialCenterDataVO.setInstituteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ADDRESS));
                tutorialCenterDataVO.setInstituteContactPerson(rs.getString(ProfessionalTutorsConstant.INSTITUTE_CONTACT_PERSON));
                tutorialCenterDataVO.setInstituteTelephone(rs.getString(ProfessionalTutorsConstant.INSTITUTE_TELEPHONE));
                tutorialCenterDataVO.setInstituteMobile(rs.getString(ProfessionalTutorsConstant.INSTITUTE_MOBILE));
                tutorialCenterDataVO.setInstituteEmail(rs.getString(ProfessionalTutorsConstant.INSTITUTE_EMAIL));
                tutorialCenterDataVO.setInstituteWebsiteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_WEBSITE));
                tutorialCenterDataVO.setInstituteCoursesOffered(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COURSES));
                tutorialCenterDataVO.setInstituteFacultyDetails(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FACULTY));
                tutorialCenterDataVO.setInstituteAchivement(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ACHIVEMENT));
                tutorialCenterDataVO.setInstituteregistrationdate(rs.getString(ProfessionalTutorsConstant.INSTITUTE_REGISTRATION_DATE));



                listOfTutorialCenter.add(tutorialCenterDataVO);


            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } catch (Exception exception) {
            exception.getMessage();
            exception.printStackTrace();

        } finally {
            try {

                if (null != pst) {
                    pst.close();
                }

                if (null != conn) {
                    conn.close();
                }

            } catch (SQLException sqlException) {
            }
        }
        return listOfTutorialCenter;
    }

    /**
     *
     * @return
     */
    public List<TutorialCenterDataVO> searchTutorialCenters(String location, String courses) {
        List<TutorialCenterDataVO> listOfTutorialCenter = new ArrayList<TutorialCenterDataVO>();
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();

            String locationName = location;
            if (locationName.equals("IND")) {

                pst = conn.prepareStatement("select * from tutorial_center where INSTITUTE_COUNTRY_CODE=? order by institute_registration_date desc ");
                pst.setString(1, locationName);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    TutorialCenterDataVO tutorialCenterDataVO = new TutorialCenterDataVO();
                    tutorialCenterDataVO.setInstituteId(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ID));
                    // tutorialCenterDataVO.setInstituteLoginName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_NAME));
                    //   tutorialCenterDataVO.setInstituePassword(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_PASSWORD));
                    //  tutorialCenterDataVO.setInstituterSecurityQuestion(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_QUESTION));
                    //  tutorialCenterDataVO.setInstituteSecurityAnswer(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_ANSWER));
                    tutorialCenterDataVO.setInstituteName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FULL_NAME));
                    //  tutorialCenterDataVO.setInstitutePrefaceInfo(rs.getString(ProfessionalTutorsConstant.INSTITUTE_PREFACE_INFO));
                    //  tutorialCenterDataVO.setInstituteCountryName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COUNTRY_NAME));
                    //  tutorialCenterDataVO.setInstituteLocationName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOCATION_NAME));
                    tutorialCenterDataVO.setInstituteArea(rs.getString(ProfessionalTutorsConstant.INSTITUTE_AREA));
                    //tutorialCenterDataVO.setInstituteLandMark(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LANDMARK));
                    //tutorialCenterDataVO.setInstituteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ADDRESS));
                    //tutorialCenterDataVO.setInstituteContactPerson(rs.getString(ProfessionalTutorsConstant.INSTITUTE_CONTACT_PERSON));
                    //tutorialCenterDataVO.setInstituteTelephone(rs.getString(ProfessionalTutorsConstant.INSTITUTE_TELEPHONE));
                    //tutorialCenterDataVO.setInstituteMobile(rs.getString(ProfessionalTutorsConstant.INSTITUTE_MOBILE));
                    //tutorialCenterDataVO.setInstituteEmail(rs.getString(ProfessionalTutorsConstant.INSTITUTE_EMAIL));
                    tutorialCenterDataVO.setInstituteWebsiteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_WEBSITE));
                    tutorialCenterDataVO.setInstituteCoursesOffered(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COURSES));
                    tutorialCenterDataVO.setInstituteFacultyDetails(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FACULTY));
                    tutorialCenterDataVO.setInstituteAchivement(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ACHIVEMENT));



                    listOfTutorialCenter.add(tutorialCenterDataVO);


                }

            } else {

                pst = conn.prepareStatement("select * from tutorial_center where INSTITUTE_LOCATION_ID=? order by institute_registration_date desc");
                pst.setString(1, location);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    TutorialCenterDataVO tutorialCenterDataVO = new TutorialCenterDataVO();
                    tutorialCenterDataVO.setInstituteId(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ID));
                    // tutorialCenterDataVO.setInstituteLoginName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_NAME));
                    //   tutorialCenterDataVO.setInstituePassword(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOGIN_PASSWORD));
                    //  tutorialCenterDataVO.setInstituterSecurityQuestion(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_QUESTION));
                    //  tutorialCenterDataVO.setInstituteSecurityAnswer(rs.getString(ProfessionalTutorsConstant.INSTITUTE_SECURITY_ANSWER));
                    tutorialCenterDataVO.setInstituteName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FULL_NAME));
                    //  tutorialCenterDataVO.setInstitutePrefaceInfo(rs.getString(ProfessionalTutorsConstant.INSTITUTE_PREFACE_INFO));
                    //  tutorialCenterDataVO.setInstituteCountryName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COUNTRY_NAME));
                    //  tutorialCenterDataVO.setInstituteLocationName(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LOCATION_NAME));
                    tutorialCenterDataVO.setInstituteArea(rs.getString(ProfessionalTutorsConstant.INSTITUTE_AREA));
                    //tutorialCenterDataVO.setInstituteLandMark(rs.getString(ProfessionalTutorsConstant.INSTITUTE_LANDMARK));
                    //tutorialCenterDataVO.setInstituteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ADDRESS));
                    //tutorialCenterDataVO.setInstituteContactPerson(rs.getString(ProfessionalTutorsConstant.INSTITUTE_CONTACT_PERSON));
                    //tutorialCenterDataVO.setInstituteTelephone(rs.getString(ProfessionalTutorsConstant.INSTITUTE_TELEPHONE));
                    //tutorialCenterDataVO.setInstituteMobile(rs.getString(ProfessionalTutorsConstant.INSTITUTE_MOBILE));
                    //tutorialCenterDataVO.setInstituteEmail(rs.getString(ProfessionalTutorsConstant.INSTITUTE_EMAIL));
                    tutorialCenterDataVO.setInstituteWebsiteAddress(rs.getString(ProfessionalTutorsConstant.INSTITUTE_WEBSITE));
                    tutorialCenterDataVO.setInstituteCoursesOffered(rs.getString(ProfessionalTutorsConstant.INSTITUTE_COURSES));
                    tutorialCenterDataVO.setInstituteFacultyDetails(rs.getString(ProfessionalTutorsConstant.INSTITUTE_FACULTY));
                    tutorialCenterDataVO.setInstituteAchivement(rs.getString(ProfessionalTutorsConstant.INSTITUTE_ACHIVEMENT));



                    listOfTutorialCenter.add(tutorialCenterDataVO);


                }
            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } catch (Exception exception) {
            exception.getMessage();
            exception.printStackTrace();

        } finally {
            try {

                if (null != pst) {
                    pst.close();
                }

                if (null != conn) {
                    conn.close();
                }

            } catch (SQLException sqlException) {
            }
        }
        return listOfTutorialCenter;
    }

    /**
     *
     * @return
     */
    public String getAutogeneratedId() {
        String autoGeneratedId = null;

        /**
         * Minimum length for a decent password
         */
        /**
         * The random number generator.
         */
        java.util.Random r = new java.util.Random();

        char[] goodChar = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K',
            'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};

        int[] goodInt = {1, 2, 3, 4, 5, 6, 7, 8, 9};

        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < 3; i++) {
            sb.append(goodChar[r.nextInt(goodChar.length)]);
        }
        for (int j = 1; j < 6; j++) {
            sb.append(goodInt[r.nextInt(j)]);
        }
        autoGeneratedId = sb.toString();
        System.out.println(" autoGeneratedId  :--> " + autoGeneratedId);
        return autoGeneratedId;
    }

    public int searchTotalTutorialCenters(String location, String courses) {
        int totalTutorCount = 0;
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            DbConnection dbConnection = new DbConnection();
            conn = dbConnection.dbConnect();
            String countryLocation = location;
            System.out.println("countryLocation in service......" + countryLocation);
            if (countryLocation.equals("IND")) {
                String query = "select count(*) as total_institute   from tutorial_center td  where td.INSTITUTE_COUNTRY_CODE =?";
                pst = conn.prepareStatement(query);
                pst.setString(1, countryLocation);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    totalTutorCount = rs.getInt("total_institute");
                    System.out.println("totalTutorCount in service......" + totalTutorCount);
                }
            } else {
                String query = "select count(*) as total_institute   from tutorial_center td  where td.INSTITUTE_LOCATION_ID =?";
                pst = conn.prepareStatement(query);
                pst.setString(1, location);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    totalTutorCount = rs.getInt("total_institute");
                    System.out.println("totalTutorCount in service......" + totalTutorCount);
                }
            }
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } catch (Exception exception) {
            exception.getMessage();
            exception.printStackTrace();

        } finally {
            try {

                if (null != pst) {
                    pst.close();
                }

                if (null != conn) {
                    conn.close();
                }

            } catch (SQLException sqlException) {
            }
        }
        return totalTutorCount;
    }
}
